<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用就是对sql进行分类化管理，理解sql隔离
     namespace命名 包名+类名/包名+mapper文件名
     注意：使用mapper代理方法开发，namespace有特殊重要的作用
  -->
<mapper namespace="cn.itcast.mybatis.mapper.UserMapper">

    <!--定义resultMap
    将SELECT id id_,username username_ FROM USER 和User类中的属性做一个映射关系

    type：resultMap最终映射的Java对象类型，可以使用别名
    id:对resultMap的唯一标识
    -->
    <resultMap id="userResultMap" type="user">
        <!--id表示查询结果集中唯一标识
        column:查询出来的列名
        property：type指定的pojo类型中的属性名
        最终resultMap对column和property做一个映射关系（对应关系）
        -->
        <id column="id_" property="id"/>
        <!--result:对普通名映射定义
        column:查询出来的列名
        property:type指定的pojo类型中的属性名
        -->
        <result column="username_" property="username"/>
    </resultMap>

    <!--定义sql片段
    id:sql片段的唯一标识

    经验：是基于单表来定义sql片段，这样的这个sql片段可重用性才高
    在sql片段中不要包括where
     -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>

            <if test="ids!=null">
                <!--使用foreach遍历传入ids
                collection:指定输入对象中集合属性
                item:每个遍历生成对象中
                open:开始遍历时拼接的串
                close:结束遍历时拼接的串
                separator:遍历的两个对象中需要拼接的串
                -->
                <!--使用实现下边的sql拼接
                AND (id=1 OR id=10 OR id=16)-->
                <!--<foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">-->
                    <!--&lt;!&ndash;每个遍历需要拼接的串&ndash;&gt;-->
                    <!--id=#{user_id}-->
                <!--</foreach>-->

                <!--实现AND id IN(1,10,16)拼接-->
                <foreach collection="ids" item="user_id" open="AND id IN(" close=")" separator=",">
                    #{user_id}
                </foreach>
            </if>
        </if>
    </sql>

    <!--用户信息综合查询总数-->
    <select id="findUserCount" parameterType="cn.itcast.mybatis.po.UserQueryVo" resultType="int">
        <!--select count(*) from user where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'-->
        select count(*) from user
                <!--where可以自动去掉条件中的第一个and-->
        <where>
            <if test="userCustom!=null">
                <if test="userCustom.sex!=null and userCustom.sex!=''">
                    and user.sex=#{userCustom.sex}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    and user.username like '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>

    <!--用户信息综合查询
    #{userCustom.sex}：取出pojo包装对象中性别值
    ${userCustom.username}：取出pojo包装对象中用户名称
    -->
    <select id="findUserList" parameterType="cn.itcast.mybatis.po.UserQueryVo" resultType="cn.itcast.mybatis.po.UserCustom">
        <!--select id,username from user where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'-->
          select * from user
        <!--where可以自动去掉条件中的第一个and-->
          <where>
              <!--<if test="userCustom!=null">-->
                  <!--<if test="userCustom.sex!=null and userCustom.sex!=''">-->
                      <!--and user.sex=#{userCustom.sex}-->
                  <!--</if>-->
                  <!--<if test="userCustom.username!=null and userCustom.username!=''">-->
                      <!--and user.username like '%${userCustom.username}%'-->
                  <!--</if>-->
              <!--</if>-->

              <!--引用sql片段的id，如果refid指定的id不在本地mapper文件中，需要前边加namespace -->
              <include refid="query_user_where"></include>
              <!--在这里还要引用其它的sql片段-->

          </where>

    </select>

    <!--在映射文件中配置很多sql语句-->
    <!--需求：通过id查询用户表的记录-->
    <!--通过select执行数据库查询
    id:标识映射文件中的sql
    将sql语句封装到mapped Statement对象中，所以将id称为statement的id
    parameterType：指定输入参数的类型，这里指定int型
    #{}表示一个占位符号
    #{id}:其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果的所映射的Java对象类型，select指定resultType表示将单条记录映射成的java对象。
    resultType="user":用了别名
    -->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id=#{id}
    </select>

    <!--使用resultMap进行输出映射
    resultMap：指定定义的resultMap的id，如果这个resultMap在其他的mapper文件，前边需要加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM USER WHERE id=#{value}
    </select>


    <!--根据用户名称模糊查询用户信息，可能返回多条
    ${}表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
    使用${}拼接sql，引起sql注入 SELECT * FROM user WHERE username like '%' OR 1=1 OR '%';
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value

    resultType：指定就是单条记录所映射的java对象类型。
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="user">
        SELECT * FROM user WHERE username like '%${value}%'
    </select>

    <!--添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="user">
        <!--
         将插入数据的主键返回，返回到user对象中
         SELECT LAST_INSERT_ID():得到刚insert进去记录的主键值，只适用于自增主键

         keyProperty:将查询到主键值设置到parameterType指定的对象的哪个属性
         order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
         resultType：指定SELECT LAST_INSERT_ID()的结果类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(username,birthday,sex,address) value (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--
     删除用户
     根据id删除用户，需要输入id值
     -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!--根据id更新用户
    分析：
    需要传入用户的id
    需要传入用户的更新信息
    parameterType指定User对象，包括id和更新信息，注意：id必须存在
    #{id}:从输入user对象中获取id属性值
    -->
    <update id="updateUser" parameterType="cn.itcast.mybatis.po.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>
</mapper>